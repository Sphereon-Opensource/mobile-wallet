diff --git a/node_modules/react-native-quick-crypto/lib/commonjs/package.json b/node_modules/react-native-quick-crypto/lib/commonjs/package.json
index 729ac4d..1518774 100644
--- a/node_modules/react-native-quick-crypto/lib/commonjs/package.json
+++ b/node_modules/react-native-quick-crypto/lib/commonjs/package.json
@@ -1 +1,15 @@
-{"type":"commonjs"}
+{
+  "type": "commonjs",
+  "react-native": {
+    "os": "react-native-os",
+    "path": "path-browserify",
+    "fs": "expo-fs",
+    "vm": "vm-browserify"
+  },
+  "browser": {
+    "os": "react-native-os",
+    "path": "path-browserify",
+    "fs": "expo-fs",
+    "vm": "vm-browserify"
+  }
+}
diff --git a/node_modules/react-native-quick-crypto/lib/module/Hashnames.js b/node_modules/react-native-quick-crypto/lib/module/Hashnames.js
index 6999b0a..2c8c560 100644
--- a/node_modules/react-native-quick-crypto/lib/module/Hashnames.js
+++ b/node_modules/react-native-quick-crypto/lib/module/Hashnames.js
@@ -72,17 +72,23 @@ const kHashNames = {
     }
   }
 }
-export function normalizeHashName(algo, context = HashContext.Node) {
-  if (typeof algo !== 'undefined') {
-    const normAlgo = algo.toString().toLowerCase();
-    try {
-      const alias = kHashNames[normAlgo][context];
-      if (alias) return alias;
-      // eslint-disable-next-line @typescript-eslint/no-unused-vars
-    } catch (_e) {
-      // ignore
-    }
+export function normalizeHashName(algo: string | { name?: string; toString?: () => string }, context = HashContext.Node): string {
+  if (algo == null) {
+    throw new Error('Invalid Hash Algorithm: undefined');
+  }
+
+  const algoName = (typeof algo === 'string'
+    ? algo.toLowerCase()
+    : (algo.name?.toLowerCase() || algo.toString?.()?.toLowerCase() || ''));
+
+  const normAlgo = algoName.replace('-', '');
+  const hashNameEntry = kHashNames[normAlgo];
+  if (hashNameEntry) {
+    const alias = hashNameEntry[context];
+    if (alias) return alias;
   }
+
   throw new Error(`Invalid Hash Algorithm: ${algo}`);
 }
+
 //# sourceMappingURL=Hashnames.js.map
